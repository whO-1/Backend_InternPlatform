@model internPlatform.Domain.Models.ViewModels.EventUpSertViewModel
@{
    ViewBag.Title = "CreateEvent";
    Layout = "~/Areas/Admin/Views/Shared/_AdminMenuLayout.cshtml";
}

@{
    if (Model.Event.EventId == 0)
    {
        <h2> Create Event</h2>
    }
    else
    {
        <h2> Update Event</h2>
    }


    using (Html.BeginForm("EventUpSert", "Dashboard", new { area = "Admin" }, FormMethod.Post, new { role = "form", @class = "col-12 d-flex flex-column align-items-center" }))
    {
<div class="container d-flex flex-column align-items-center">
    @Html.HiddenFor(model => model.Event.EventId)
    <div class=" row col-12 col-lg-7 mt-3">
        @Html.LabelFor(m => m.Event.Title, new { @class = "col-md-4 col-form-label" })
        @Html.TextBoxFor(m => m.Event.Title, new { @class = "form-control bg-light border-2 border-black" })
    </div>
    <div class="row col-12 col-lg-7 mt-3">
        @Html.LabelFor(m => m.Event.Description, new { @class = "col-md-4 col-form-label" })
        @Html.TextAreaFor(m => m.Event.Description, new { @class = "form-control  bg-light border-2 border-black", @style = "height:100px; overflow:auto; resize:none" })
    </div>
    <div class="row col-12 col-lg-7 mt-3">
        @Html.LabelFor(m => m.Event.AuthorId)
        @Html.HiddenFor(m => m.Event.AuthorId)
        @Html.TextBoxFor(m => m.Event.AuthorId, new { @class = "form-control bg-light border-2 border-grey col-4 text-muted", @disabled = true })
    </div>
    <div class="row col-12 col-lg-7 mt-3">
        @Html.LabelFor(m => m.Event.SpecialGuests)
        @Html.TextBoxFor(m => m.Event.SpecialGuests, new { @class = "form-control bg-light border-2 border-black" })
    </div>

    <div class="row col-12 col-lg-7 mt-3">
        @Html.LabelFor(m => m.Event.StartDate)
        @Html.TextBoxFor(m => m.Event.StartDate, "{0:yyyy-MM-ddTHH:mm}", new { @type = "datetime-local", @class = "form-control bg-light border-2 border-black", @min = "2024-06-25T13:00" })
    </div>
    <div class="row col-12 col-lg-7 mt-3">
        @Html.LabelFor(m => m.Event.EndDate)
        @Html.TextBoxFor(m => m.Event.EndDate, "{0:yyyy-MM-ddTHH:mm}", new { @type = "datetime-local", @class = "form-control bg-light border-2 border-black", @min = "2024-06-25T13:00" })
    </div>

    <div class="row col-12 col-lg-7  mt-5 ">
        <label class="h4 ">Age Group</label>
        <fieldset class="d-flex flex-row justify-content-center " id="Event.AgeGroupId">
            @foreach (var item in Model.AgeGroups)
            {
                <div class="col-3 ">
                    <input type="radio" id="AgeGroup-@item.Id" name="Event.AgeGroupId" value="@item.Id" @(Model.Event.AgeGroupId == item.Id ? "checked" : "") />
                    <label for="AgeGroup-@item.Id">@item.Name</label>
                </div>
            }
        </fieldset>
    </div>


    <div class="row col-12 col-lg-7  mt-5">
        <label class="h4">Entry Type</label>
        <fieldset class="d-flex flex-row justify-content-center" id="Event.EntryTypeId" name="Event.EntryTypeId">
            @foreach (var item in Model.EntryTypes)
            {
                <div class="col-3">
                    <input type="radio" id="EntryType-@item.Id" name="Event.EntryTypeId" value="@item.Id" @(Model.Event.EntryTypeId == item.Id ? "checked" : "") />
                    <label for="EntryType-@item.Id">@item.Name</label>
                </div>
            }
        </fieldset>
    </div>


    <div class="col-12 col-lg-7 mt-5">
        <fieldset id="SelectedCategories" name="SelectedCategories">
            <legend class="h4 ">Categories</legend>
            <div class="row container-fluid d-flex flex-row justify-content-around align-content-center">
                @foreach (var item in Model.Categories)
                {
                    <div class="col-2 p-2 text-nowrap ">
                        <input type="checkbox" id="Category-@item.CategoryId" name="SelectedCategories" value="@item.CategoryId" @( Model.SelectedCategories.Any(ec => ec == item.CategoryId) ? "checked" : "") />
                        <label for="Category-@item.CategoryId">@item.Name</label>
                    </div>
                }
            </div>

        </fieldset>
    </div>

    <div class="row col-12 col-lg-7 mt-5 d-flex flex-row justify-content-center align-items-center  ">
        <div id="map" style="height: 400px; width: 100%;"></div>
        @Html.HiddenFor(m => m.Latitude)
        @Html.HiddenFor(m => m.Longitude)
    </div>

    

    <div class="row col-12 col-lg-7 mt-5 d-flex flex-row justify-content-center align-items-center  ">
        <div class=" mt-0 ml-0 w-auto">
            @Html.ActionLink("Back to events", "Events", "Dashboard", new { @class = "btn text-muted " })
        </div>
        <div class=" w-auto  m-0">
            <button type="submit" value="@(Model.Event.EventId == 0? "Create": "Update")" class="btn btn-outline-dark">@(Model.Event.EventId == 0? "Create": "Update")  </button>
        </div>
    </div>


</div>
    }
}

@section Scripts{
    <script src="~/Scripts/GMap.js" ></script>
    <script async defer>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
            key: "AIzaSyAw1ozfxkCTE0GQzoXeZ0v1TS_TQ0TGG3Y",
            v: "weekly",
        });
    </script>
}

