@using internPlatform.Application.Extensions
@model internPlatform.Domain.Models.ViewModels.EventUpSertViewModel
@{
    ViewBag.Title = "CreateEvent";
    Layout = "~/Areas/Admin/Views/Shared/_AdminMenuLayout.cshtml";
}

@{
    if (Model.Id == 0)
    {
        <h2> Create Event</h2>
    }
    else
    {
        <h2> Update Event</h2>
    }


    using (Html.BeginForm("EventUpSert", "Dashboard", new { area = "Admin" }, FormMethod.Post, new { role = "form", @class = "col-12 d-flex flex-column align-items-center", enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(m => m.StoredImagesIds)
        @Html.HiddenFor(model => model.MainImageId)
        <div class="container d-flex flex-column align-items-center">
            <div class="row col-12 col-lg-7 mt-3">
                <div class="col-12 mb-2">
                    <div style="position:relative;" class="entityImg">
                        @if (Model.MainImageId != "0")
                        {
                            <img src="@Url.Action("GetImage", "Dashboard", new { id = Model.MainImageId})" alt="image" class="w-100" />
                        }
                        else
                        {
                            <img src="~/Assets/Images/Placeholder.jpg" alt="image" class="w-100" style="width: 100%; height: 400px; object-fit: cover; " />
                        }
                    </div>
                </div>
                <div class="container overflow-x-auto">
                    <div class="col-12 d-flex flex-row gap-2">
                        @if (Model.StoredImages != null && Model.StoredImages.Count > 0)
                        {
                            foreach (var item in Model.StoredImagesIds.Split(','))
                            {
                                <div class="imgBlock" draggable="true">
                                    <div style="position:relative;" class="entityImg">
                                        <button type="button" class="btn btn-sm btn-danger removeImg" style="position: absolute; left: 77%; top:0%"> X </button>
                                        <img src="@Url.Action("GetImage", "Dashboard", new { id = item })" alt="image-event" style="width:100px; cursor:pointer " id="image-@item" class="image-element" />
                                    </div>
                                </div>
                            }
                        }

                    </div>
                </div>
            </div>

            @Html.HiddenFor(model => model.Id)
            <div class=" row col-12 col-lg-7 mt-3">
                @Html.LabelFor(m => m.Title, new { @class = "col-md-4 col-form-label" })
                @Html.TextBoxFor(m => m.Title, new { @class = "form-control bg-light border-2 border-black" })
            </div>
            <div class="row col-12 col-lg-7 mt-3">
                @Html.LabelFor(m => m.Description, new { @class = "col-md-4 col-form-label" })
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control  bg-light border-2 border-black", @style = "height:100px; overflow:auto; resize:none" })
            </div>
            <div class="row col-12 col-lg-7 mt-3">
                @Html.LabelFor(m => m.AuthorId)
                @Html.HiddenFor(m => m.AuthorId)
                @Html.TextBoxFor(m => m.AuthorId, new { @class = "form-control bg-light border-2 border-grey col-4 text-muted", @disabled = true })
            </div>
            <div class="row col-12 col-lg-7 mt-3">
                @Html.LabelFor(m => m.SpecialGuests)
                @Html.TextBoxFor(m => m.SpecialGuests, new { @class = "form-control bg-light border-2 border-black" })
            </div>

            <div class="row col-12 col-lg-7 mt-3">
                @Html.LabelFor(m => m.StartDate)
                @Html.TextBoxFor(m => m.StartDate, new { @type = "datetime-local", @class = "form-control bg-light border-2 border-black", @min = Model.Today, @value = Model.StartDate })
            </div>
            <div class="row col-12 col-lg-7 mt-3">
                @Html.LabelFor(m => m.EndDate)
                @Html.TextBoxFor(m => m.EndDate, new { @type = "datetime-local", @class = "form-control bg-light border-2 border-black", @min = Model.Today, @value = Model.EndDate })
            </div>

            <div class="row col-12 col-lg-7  mt-5 ">
                <label class="h4 ">Age Group</label>
                <fieldset class="d-flex flex-row justify-content-center " id="AgeGroupId">
                    @foreach (var item in Model.AgeGroups)
                    {
                        <div class="col-3 ">
                            <input type="radio" id="AgeGroup-@item.Id" name="AgeGroupId" value="@item.Id" @(Model.AgeGroupId == item.Id ? "checked" : "") />
                            <label for="AgeGroup-@item.Id">@item.Name</label>
                        </div>
                    }
                </fieldset>
            </div>


            <div class="row col-12 col-lg-7  mt-5">
                <label class="h4">Entry Type</label>
                <fieldset class="d-flex flex-row justify-content-center" id="EntryTypeId" name="EntryTypeId">
                    @foreach (var item in Model.EntryTypes)
                    {
                        <div class="col-3">
                            <input type="radio" id="EntryType-@item.Id" name="EntryTypeId" value="@item.Id" @(Model.EntryTypeId == item.Id ? "checked" : "") />
                            <label for="EntryType-@item.Id">@item.Name</label>
                        </div>
                    }
                </fieldset>
            </div>


            <div class="col-12 col-lg-7 mt-5">
                <fieldset id="SelectedCategories" name="SelectedCategories">
                    <legend class="h4 ">Categories</legend>
                    <div class="row container-fluid d-flex flex-row justify-content-around align-content-center">
                        @foreach (var item in Model.Categories)
                        {
                            <div class="col-2 p-2 text-nowrap ">
                                <input type="checkbox" id="Category-@item.Id" name="SelectedCategories" value="@item.Id" @(Model.SelectedCategories.Any(ec => ec == item.Id) ? "checked" : "") />
                                <label for="Category-@item.Id">@item.Name</label>
                            </div>
                        }
                    </div>

                </fieldset>
            </div>

            <div class="row col-12 col-lg-7 mt-5 d-flex flex-row justify-content-center align-items-center  ">
                <div id="map" style="height: 400px; width: 100%;"></div>
                @Html.HiddenFor(m => m.Latitude)
                @Html.HiddenFor(m => m.Longitude)
            </div>

            <div class="row col-12 col-lg-7 mt-5 d-flex flex-row justify-content-center align-items-center  ">
                <div class="mt-3">
                    <label for="formFileMultiple" class="form-label">Upload images</label>
                    <div class="container btn-group">
                        <input class="form-control" type="file" id="formFileMultiple" accept="image/*" multiple>
                        <button type="button" class="btn btn-outline-primary" id="removeButton"> <i class="bi bi-trash"></i> </button>
                    </div>

                </div>
                <div id="selectedFiles" class="mt-3"></div>

            </div>
            @Html.HiddenFor(m => m.InputImages, new { @id = "imageIds" })


            <div class="row col-12 col-lg-7 mt-5 d-flex flex-row justify-content-center align-items-center  ">
                <div class=" mt-0 ml-0 w-auto">
                    @Html.ActionLink("Back to events", "Events", "Dashboard", new { @class = "btn text-muted " })
                </div>
                <div class=" w-auto  m-0">
                    <button type="submit" value="@(Model.Id == 0? "Create": "Update")" class="btn btn-outline-primary"> @(Model.Id == 0? "Create": "Update")  </button>
                </div>
            </div>

        </div>
    }
}

@Url.ScriptVersioned("~/Scripts/GMap.js")
@Url.ScriptVersioned("~/Scripts/ViewScripts/InputFiles.js")
@Url.ScriptVersioned("~/Scripts/ViewScripts/ImagesCollection.js")
@Url.CssVersioned("~/Styles/InputFiles.css")
@Url.ScriptVersioned("~/Scripts/ViewScripts/confirmPopUp.js")
@section Scripts{
    <script async defer>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
            key: "AIzaSyAw1ozfxkCTE0GQzoXeZ0v1TS_TQ0TGG3Y",
            v: "weekly",
        });

    </script>
}
